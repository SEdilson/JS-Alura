{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","get","map","Negociacao","Date","objeto","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n    constructor() {\r\n\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n                return negociacoes;\r\n        }).catch(erro => {\r\n             throw new Error(erro)\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n\r\n           return this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível obter as negociações da semana.')\r\n                });\r\n    \r\n    } \r\n               \r\n    obterNegociacoesDaSemanaAnterior() {\r\n           \r\n            return this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível obter as negociações da semana anterior.')\r\n                });\r\n\r\n        \r\n        }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n\r\n            return this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível obter as negociações da semana retrasada.')\r\n                });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n\r\n       return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso.')\r\n            .catch(erro => {\r\n                throw new Error('Não foi possível adicionar a negociação')\r\n            }); \r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações');\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso.')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações.')\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n       return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                negociacoes.filter(negociacao =>\r\n                    !listaAtual.some(negociacaoExistente => \r\n                        negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error('Não foi possível importar as negociações.')\r\n            });\r\n    }\r\n}"]}