{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","catch","Error","erro","get","map","Date","objeto","data","quantidade","valor","console","log","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n                return negociacoes;\r\n        }).catch(erro => {\r\n             throw new Error(erro)\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n\r\n           return this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível obter as negociações da semana.')\r\n                });\r\n    \r\n    } \r\n               \r\n    obterNegociacoesDaSemanaAnterior() {\r\n           \r\n            return this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível obter as negociações da semana anterior.')\r\n                });\r\n\r\n        \r\n        }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n\r\n            return this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível obter as negociações da semana retrasada.')\r\n                });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n\r\n       return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso.')\r\n            .catch(erro => {\r\n                throw new Error('Não foi possível adicionar a negociação')\r\n            }); \r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações');\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso.')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações.')\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n       return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                negociacoes.filter(negociacao =>\r\n                    !listaAtual.some(negociacaoExistente => \r\n                        negociacao.isEquals(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro)\r\n                throw new Error('Não foi possível importar as negociações.')\r\n            });\r\n    }\r\n}"]}